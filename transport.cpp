
#include <math.h>
#include <cmath>
#include <stdlib.h>
using namespace std;
#include <iostream>
#include "qcd.hpp"
#include "transport.hpp"


// 1st order shear coefficient

double beta_shear(double T)
{
	// beta_pi = eta / tau_pi
	// temperature dependence of beta_pi = I32/T in quasiparticle kinetic model
	#ifndef CONFORMAL_EOS
		double T1 = (double)T;
		double T2 = T1 * T1;
		double T3 = T2 * T1;
		double T4 = T3 * T1;
		double T5 = T4 * T1;
		double T6 = T5 * T1;
		double T7 = T6 * T1;
		double T8 = T7 * T1;
		double T9 = T8 * T1;
		double T10 = T9 * T1;
		double T11 = T10 * T1;
		double T12 = T11 * T1;
		return (8.611704298094825e-6 - 0.001405354006113392*T1 + 0.059924402660583354*T2 - 1.1252821226321765*T3 + 11.505088678768702*T4 - 72.86243933500441*T5 +
     	312.67652000568955*T6 - 919.4553300642775*T7 + 1851.880055174282*T8 - 2520.2910195876684*T9 + 2228.4719999229687*T10 -
     	1163.3696941415265*T11 + 275.1649200477449*T12)/
   	(4.814184219646834 - 23.427763291345297*T1 + 78.10907293901035*T2 - 220.9834748507111*T3 + 463.6211365026477*T4 - 658.0962754530466*T5 +
     	604.0491642749903*T6 - 329.15455711633166*T7 + 83.03984882593176*T8 - 0.34262854377950497*T9 + 0.03765047242502595*T10 -
     	0.0024572359354327667*T11 + 0.0000720828838022736*T12);
   	#else
   		return 4.0 * EOS_FACTOR * powf(T,4.0) / 15.0;
   	#endif
}

// 1st order bulk coefficient

double beta_bulk(double T)
{
	// beta_Pi = zeta / tau_Pi
	#ifndef CONFORMAL_EOS
		double T1 = (double)T;
		double T2 = T1 * T1;
		double T3 = T2 * T1;
		double T4 = T3 * T1;
		double T5 = T4 * T1;
		double T6 = T5 * T1;
		double T7 = T6 * T1;
		double T8 = T7 * T1;
		double T9 = T8 * T1;
		double T10 = T9 * T1;
		double T11 = T10 * T1;
		double T12 = T11 * T1;
		double T13 = T12 * T1;
		double T14 = T13 * T1;
		// full quasiparticle model
		return (0.057187918268175174 - 2.5795110808844144*T1 + 31.966143337661794*T2 - 186.97202223464143*T3 + 632.9739160169219*T4 -
	     1356.8644912535221*T5 + 1937.6556428262882*T6 - 1901.4144609887912*T7 + 1305.7115016142484*T8 - 632.7107309491553*T9 +
	     215.7883928137199*T10 - 50.783337922429304*T11 + 7.882963305898372*T12 - 0.7302386364254765*T13 +
	     0.031006456705249083*T14)/
	   (2168.5818494848654 - 17367.372494454743*T1 + 62866.89323544513*T2 - 136008.52657020878*T3 + 196076.0893015133*T4 -
	     198954.9682758633*T5 + 146384.87731197142*T6 - 79310.95783243925*T7 + 31803.091369445476*T8 - 9398.242646642117*T9 +
	     2016.6245278736917*T10 - 304.98512854363526*T11 + 30.758339605713708*T12 - 1.852389925261096*T13 +
	     0.05027444936020055*T14);

	    // 5/3*betapi - cs2kinetic(e+p)
		// return (0.000010905760709167861 - 0.004683989457592804*T1 + 0.24754406178287106*T2 - 4.885445624666566*T3 + 50.09614745592617*T4 -
	 //     307.7032088120906*T5 + 1199.345936356805*T6 - 3134.7810945740785*T7 + 5705.875248385415*T8 -
	 //     7386.615125073046*T9 + 6838.523042759372*T10 - 4474.354253326277*T11 + 1997.5827901556845*T12 -
	 //     562.5161507019361*T13 + 79.67974066311064*T14)/
	 //   (-40.624628025755804 + 107.6723401385496*T1 - 23.19390975206659*T2 - 95.34803927008286*T3 - 47.579669340536825*T4 +
	 //     66.02920940835048*T5 + 194.0662782679704*T6 + 14.784256174958234*T7 - 637.8693894211432*T8 +
	 //     806.4328841485209*T9 - 469.0986465043204*T10 + 137.20558809601678*T11 - 9.98223482226815*T12 +
	 //     0.30712590209276874*T13 - 0.002441723962961617*T14);
   	#else
   		return 0.0;
   	#endif
}



// 2nd order shear transport coefficients / betapi

double tauSS(double T)
{
	#ifndef CONFORMAL_EOS
		double T1 = (double)T;
		double T2 = T1 * T1;
		double T3 = T2 * T1;
		double T4 = T3 * T1;
		double T5 = T4 * T1;
		double T6 = T5 * T1;
		double T7 = T6 * T1;
		double T8 = T7 * T1;
		double T9 = T8 * T1;
		double T10 = T9 * T1;
		double T11 = T10 * T1;
		double T12 = T11 * T1;
		double T13 = T12 * T1;
		double T14 = T13 * T1;
		double T15 = T14 * T1;
		double T16 = T15 * T1;
		double T17 = T16 * T1;
		double T18 = T17 * T1;
		double T19 = T18 * T1;
		double T20 = T19 * T1;
		return (3.1902902102171014e-14 + 3.6473403148287593e-11*T - 1.4681531534845377e-9*T2 - 2.2978151952475593e-7*T3 + 0.000025368864732002707*T4 -
     0.0012270677121964577*T5 + 0.03679814632697644*T6 - 0.7615536873938464*T7 + 11.424552745479811*T8 -
     126.82132531785702*T9 + 1028.7700003067368*T10 - 5604.954789297192*T11 + 14890.7521305975*T12 +
     19360.924240267435*T13 - 204925.02293835668*T14 + 537103.0759431187*T15 - 745512.8555881173*T16 +
     561278.0373283497*T17 - 132801.76145649268*T18 - 112731.1368481797*T19 + 72477.80043807805*T20)/
   (1.6126888610794705e-14 + 1.8580607657742264e-11*T - 7.129928928195451e-10*T2 - 1.2044460202699227e-7*T3 + 0.000013028426199263437*T4 -
     0.0006242124741645514*T5 + 0.01858142870918551*T6 - 0.382181612836983*T7 + 5.704001436028822*T8 -
     62.95728786337562*T9 + 503.66887793696134*T10 - 2609.353744732505*T11 + 5155.099584184365*T12 +
     25270.593371494604*T13 - 157839.53929233216*T14 + 384518.19842363964*T15 - 521522.377190076*T16 +
     388473.81248813897*T17 - 90229.75736667341*T18 - 78576.79227181048*T19 + 49825.99099452628*T20);
	#else
		return 10.0/7.0;
	#endif
}


double deltaSS(double T)
{
	#ifndef CONFORMAL_EOS
		double T1 = (double)T;
		double T2 = T1 * T1;
		double T3 = T2 * T1;
		double T4 = T3 * T1;
		double T5 = T4 * T1;
		double T6 = T5 * T1;
		double T7 = T6 * T1;
		double T8 = T7 * T1;
		double T9 = T8 * T1;
		double T10 = T9 * T1;
		double T11 = T10 * T1;
		double T12 = T11 * T1;
		double T13 = T12 * T1;
		double T14 = T13 * T1;
		double T15 = T14 * T1;
		double T16 = T15 * T1;
		double T17 = T16 * T1;
		double T18 = T17 * T1;
		double T19 = T18 * T1;
		double T20 = T19 * T1;
		return (2.3123648435463478e-14 + 2.653134872793681e-11*T - 1.0455326350305228e-9*T2 - 1.696063340536917e-7*T3 + 0.000018560221286427176*T4 -
     0.0008944307915939945*T5 + 0.02674899697420029*T6 - 0.5522877505882912*T7 + 8.267937945201288*T8 -
     91.56029564978036*T9 + 739.0326553515318*T10 - 3963.3404882266636*T11 + 9730.169228055476*T12 +
     20965.239425812917*T13 - 173092.68038544193*T14 + 441601.8355209196*T15 - 609985.9561191576*T16 +
     461827.6835107632*T17 - 114982.2164250206*T18 - 86311.83441101473*T19 + 57047.98999643514*T20)/
   (1.3980641599349208e-14 + 1.6127693285377702e-11*T - 6.144411204860252e-10*T2 - 1.051433890938483e-7*T3 + 0.000011345131910016187*T4 -
     0.0005431282800680449*T5 + 0.01615900693425236*T6 - 0.3321833715521992*T7 + 4.954699020346726*T8 - 54.642993503851*T9 +
     436.6938963652453*T10 - 2258.854846886464*T11 + 4436.04092582274*T12 + 22096.673716873258*T13 - 137668.7319149623*T14 +
     335897.8325801482*T15 - 457350.6414855325*T16 + 343974.7038645733*T17 - 84726.88495746425*T18 - 64580.14059500214*T19 +
     42303.904169419286*T20);
	#else
		return 4.0/3.0;
	#endif
}


// 2nd order bulk transport coefficients / betaPi

double lambdaSB(double T)
{
	#ifndef CONFORMAL_EOS
		double T1 = (double)T;
		double T2 = T1 * T1;
		double T3 = T2 * T1;
		double T4 = T3 * T1;
		double T5 = T4 * T1;
		double T6 = T5 * T1;
		double T7 = T6 * T1;
		double T8 = T7 * T1;
		double T9 = T8 * T1;
		double T10 = T9 * T1;
		double T11 = T10 * T1;
		double T12 = T11 * T1;
		double T13 = T12 * T1;
		double T14 = T13 * T1;
		double T15 = T14 * T1;
		double T16 = T15 * T1;
		double T17 = T16 * T1;
		double T18 = T17 * T1;
		double T19 = T18 * T1;
		double T20 = T19 * T1;
		return (8.074008637896085e-14 + 1.4521738724610116e-10*T + 1.0561878663243956e-8*T2 - 2.886475329123721e-6*T3 + 0.00019632730980086865*T4 -
     0.006805817865750017*T5 + 0.1282156842151053*T6 - 0.7811831200642801*T7 - 25.386802662803294*T8 +
     863.2338792892917*T9 - 14260.43370444323*T10 + 152128.81589917117*T11 - 1.061580723945412e6*T12 +
     4.342640843930646e6*T13 - 7.550038649670816e6*T14 - 1.0147443792119526e6*T15 + 2.9548735254152626e7*T16 -
     6.207545065954556e7*T17 + 6.899546728673512e7*T18 - 4.33542123965421e7*T19 + 1.235521034989592e7*T20)/
   (4.0796975673978034e-14 + 7.38306951869429e-11*T + 5.536739982337452e-9*T2 - 1.4739949454496843e-6*T3 + 0.00009890464996939923*T4 -
     0.0033603924874021146*T5 + 0.06032568306522431*T6 - 0.24469257569644493*T7 - 16.386289919253468*T8 +
     499.4926315810809*T9 - 8049.062451749535*T10 + 84763.1844624573*T11 - 580218.5165589283*T12 + 2.254512842174514e6*T13 -
     3.0367484406330865e6*T14 - 4.982074081104018e6*T15 + 2.6681365580501582e7*T16 - 4.996827307344645e7*T17 +
     5.344145521716283e7*T18 - 3.285385819602032e7*T19 + 9.185346457229817e6*T20);
	#else
		return 1.2;
	#endif
}


double deltaBB(double T)
{
	#ifndef CONFORMAL_EOS
		double T1 = (double)T;
		double T2 = T1 * T1;
		double T3 = T2 * T1;
		double T4 = T3 * T1;
		double T5 = T4 * T1;
		double T6 = T5 * T1;
		double T7 = T6 * T1;
		double T8 = T7 * T1;
		double T9 = T8 * T1;
		double T10 = T9 * T1;
		double T11 = T10 * T1;
		double T12 = T11 * T1;
		double T13 = T12 * T1;
		double T14 = T13 * T1;
		double T15 = T14 * T1;
		double T16 = T15 * T1;
		double T17 = T16 * T1;
		double T18 = T17 * T1;
		double T19 = T18 * T1;
		double T20 = T19 * T1;
		return (8.785678474895203e-10 + 8.412358643395344e-7*T - 0.000053176761579355054*T2 + 0.0005632404616729549*T3 + 0.04615845152734432*T4 -
     2.2077756833074003*T5 + 49.974780659117776*T6 - 711.7207304527724*T7 + 6881.109828877766*T8 - 46373.66186165702*T9 +
     219505.94136608983*T10 - 729796.1527008245*T11 + 1.6996582850974011e6*T12 - 2.754812193355131e6*T13 +
     3.1195434969091793e6*T14 - 2.5735301875020415e6*T15 + 1.7598229344048852e6*T16 - 1.139704389310528e6*T17 +
     616869.927003753*T18 - 209866.21975520515*T19 + 35454.73148100636*T20)/
   (5.595945257754411e-10 + 5.47159182045909e-7*T - 0.00003326334768621545*T2 + 0.00024651446889396877*T3 + 0.03501138290941951*T4 -
     1.561455313595892*T5 + 34.5879837031573*T6 - 485.981053208654*T7 + 4636.162111624037*T8 - 30706.688970037827*T9 +
     141753.6597580666*T10 - 454168.63323405077*T11 + 1.0020159262766113e6*T12 - 1.5049326480781105e6*T13 +
     1.5656905767209225e6*T14 - 1.2944924964444812e6*T15 + 1.1453287617725453e6*T16 - 1.0496343979082939e6*T17 +
     683998.0153844289*T18 - 248620.8804126722*T19 + 42576.48998942066*T20);
	#else
		return 1.0 - 0.295963; // cs2kinetic(infty) = 0.295963
	#endif
}

double lambdaBS(double T)
{
	#ifndef CONFORMAL_EOS
		double T1 = (double)T;
		double T2 = T1 * T1;
		double T3 = T2 * T1;
		double T4 = T3 * T1;
		double T5 = T4 * T1;
		double T6 = T5 * T1;
		double T7 = T6 * T1;
		double T8 = T7 * T1;
		double T9 = T8 * T1;
		double T10 = T9 * T1;
		double T11 = T10 * T1;
		double T12 = T11 * T1;
		double T13 = T12 * T1;
		double T14 = T13 * T1;
		double T15 = T14 * T1;
		double T16 = T15 * T1;
		double T17 = T16 * T1;
		double T18 = T17 * T1;
		double T19 = T18 * T1;
		double T20 = T19 * T1;
		return (7.330039214736775e-10 + 8.894506255048703e-7*T - 0.000049974175452658275*T2 - 9.337111075090562e-7*T3 + 0.07543283531073088*T4 -
     3.0576933072466503*T5 + 66.1676002531837*T6 - 929.0899279256007*T7 + 9009.535727333901*T8 - 61778.618101217246*T9 +
     301802.8946289559*T10 - 1.0505943391130269e6*T11 + 2.596541015041242e6*T12 - 4.518109922850909e6*T13 +
     5.485987981766749e6*T14 - 4.596268825449239e6*T15 + 2.627384235942857e6*T16 - 1.0280580502970134e6*T17 +
     286004.61825759185*T18 - 57020.10202623287*T19 + 7439.001976650034*T20)/
   (1.2699661254376854e-9 + 1.6173859447889161e-6*T - 0.00008143005470274076*T2 - 0.0008621470997729544*T3 + 0.17312802273162223*T4 -
     6.4674970296775465*T5 + 135.47466437765917*T6 - 1859.371838543868*T7 + 17596.954257662364*T8 - 116747.57565292931*T9 +
     543189.3790655793*T10 - 1.7564526803807614e6*T11 + 3.8804216606247593e6*T12 - 5.685163953052096e6*T13 +
     5.376726801713576e6*T14 - 3.4697202033568234e6*T15 + 2.3734409248196464e6*T16 - 2.3226994928789902e6*T17 +
     1.7290210834476838e6*T18 - 681178.4923250087*T19 + 122913.34459977112*T20);
	#else
		return 1.0/3.0 - 0.295963; // cs2kinetic(infty) = 0.295963
	#endif
}

























